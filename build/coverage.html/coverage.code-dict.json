{"/home/travis/build/npmtest/node-npmtest-indico.io/test.js":"/* istanbul instrument in package npmtest_indico_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-indico.io/lib.npmtest_indico.io.js":"/* istanbul instrument in package npmtest_indico_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_indico_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_indico_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-indico.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-indico.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_indico_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_indico_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_indico_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_indico_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_indico_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_indico_io.__dirname + '/lib.npmtest_indico_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-indico.io/node_modules/indico.io/lib/indico.js":"var services = require('./services.js').services\n  , makeRequest = require('./services.js').makeRequest\n  , apiRequest = require('./services.js').apiRequest\n  , detectBatch = require('./services.js').detectBatch\n  , Collection = require('./custom.js')\n  , indico = require('./services.js').base;\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction snakeCase(str) {\n  return str.replace(/([A-Z])/g, function (char) {\n    return '_' + char.toLowerCase();\n  });\n}\n\nservices.forEach(function (api) {\n  indico[api.name] = apiRequest(api, false);\n  indico[\"batch\" + capitalize(api.name)] = apiRequest(api, true);\n});\n\n// camelCase + snake_case + lowercase supported\nfor (name in indico) {\n  indico[snakeCase(name)] = indico[name];\n  indico[name.toLowerCase()] = indico[name];\n}\n\nindico.Collection = function(collectionName, config) {\n  return new Collection(collectionName, config);\n}\n\nindico.collections = function(config) {\n  version = config['version'] || '1'\n  delete config['version']\n  return makeRequest('/custom/collections', version, {}, false, config);\n}\n\nindico.relevance = function(data, queries, config) {\n  var batch = detectBatch(data);\n  config = config || {};\n  config.queries = queries\n  version = config['version'] || '1'\n  config.synonyms = config.synonyms || false;\n  delete config['version']\n  return makeRequest('/relevance', version, data, batch, config)\n}\nindico.posneg = indico.sentiment;\n\nmodule.exports = indico;\n","/home/travis/build/npmtest/node-npmtest-indico.io/node_modules/indico.io/lib/services.js":"var Promise = require('bluebird')\n  , settings = require('./settings.js')\n  , image = require('./image.js')\n  , pdf = require('./pdf.js')\n  , request = Promise.promisify(require('request'));\n\nPromise.promisifyAll(request);\n\nvar base = {};\nbase.apiKey = false;\nbase.cloud = false;\nbase.host = 'apiv2.indico.io';\n\nfunction detectBatch(data) {\n  return Object.prototype.toString.call(data).indexOf(\"Array\") > -1;\n}\n\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n\nfunction extend(target) {\n    var sources = [].slice.call(arguments, 1);\n    sources.forEach(function (source) {\n        for (var prop in source) {\n            target[prop] = source[prop];\n        }\n    });\n    return target;\n}\n\nfunction service(name, privateCloud) {\n  var url_protocol = \"https\";\n\n  /* given a set of parameters, returns the proper url for the REST api*/\n  if (privateCloud) {\n    var url = privateCloud + '.indico.domains' + name;\n  } else {\n    var url = base.host + name;\n  }\n\n  if (!endsWith(base.host, \"indico.io\") && !endsWith(base.host, \"indico.domains\")) {\n    url_protocol = \"http\"\n  }\n\n  return url_protocol + \"://\" + url;\n}\n\nfunction addKeywordArguments(body, config) {\n  // pass along additional keyword args in JSON body\n  for (var key in config) {\n    if (key !== 'apiKey' && key !== 'privateCloud' && key !== 'apis') {\n      body[key] = config[key];\n    }\n  }\n  return body;\n}\n\nfunction postprocess(results, name) {\n  if (name.indexOf('apis') === 1) {\n      var formatted_results = {};\n      for (api in results) {\n        if ('results' in results[api]) {\n          formatted_results[api] = results[api]['results'];\n        } else {\n          formatted_results[api] = results[api];\n        }\n      }\n      return formatted_results;  }\n  return results;\n}\n\nvar makeRequest = function (name, version, data, batch, config) {\n  var apiKey = settings.resolveApiKey(config, base.apiKey);\n  var privateCloud = settings.resolvePrivateCloud(config, base.cloud);\n\n  // Params passed in as keyword arguments\n  var apis = config ? config['apis'] : false;\n  var body = {};\n\n  body['data'] = data;\n  body = addKeywordArguments(body, config);\n\n  if (name.indexOf('custom') > -1 && batch) {\n    name = '/custom/batch/' + name.split('custom/')[1];\n  } else {\n    name = (batch ? name + \"/batch\" : name);\n  }\n\n  urlParams = {};\n  if (apis) {\n      urlParams[\"apis\"] = apis.join(\",\");\n  }\n\n  if (version) {\n      urlParams[\"version\"] = version;\n  }\n\n  var options = {\n    method: 'POST',\n    url: service(name, privateCloud),\n    body: JSON.stringify(body),\n    headers: {\n      'Content-type': 'application/json',\n      'Accept': 'text/plain',\n      'client-lib': 'node',\n      'version-number': '0.9.0',\n      'X-ApiKey': apiKey\n    },\n    qs: urlParams\n  };\n\n  return request(options).then(function (results) {\n    var res = results[0];\n    var body = results[1];\n    /*\n    TODO: Make sure this matches the API headers\n    */\n    var warning = res.headers['X-Warning'];\n\n    if (warning) {\n      console.warn(warning);\n    }\n    if (res.statusCode !== 200) {\n      return new Error(JSON.parse(body).error)\n    }\n    results = JSON.parse(body).results;\n    results = postprocess(results, name);\n\n    return results\n  });\n}\n\nvar apiRequest = function (api, batch) {\n  return function (data, config) {\n    config = config || {}\n\n    // use api defaults when present\n    config = extend(config, api.config || {});\n\n    var batch = batch || detectBatch(data);\n    var version = config.version || api.version;\n\n    // Keywords Multilingual must be version 1\n    if (\"language\" in config && config[\"language\"] != \"english\") {\n      version = 1;\n    }\n\n    if (api.type === \"image\") {\n      var size = (api.name === \"fer\" && config[\"detect\"]) ? false : api.size;\n      return image.preprocess(data, size, api.min_axis, batch).then(function(packaged) {\n        return makeRequest(api.endpoint, version, packaged, batch, config);\n      });\n    } else if (api.type === \"pdf\") {\n      return pdf.preprocess(data, batch).then(function(packaged) {\n        return makeRequest(api.endpoint, version, packaged, batch, config);\n      });\n    } else {\n      return makeRequest(api.endpoint, version, data, batch, config);\n    }\n  };\n}\n\nmodule.exports = {\n  'base': base,\n  'service': service,\n  'detectBatch': detectBatch,\n  'makeRequest': makeRequest,\n  'addKeywordArguments': addKeywordArguments,\n  'apiRequest': apiRequest,\n  'services': [\n    {\n         name: 'intersections'\n       , type: 'text'\n       , endpoint: '/apis/intersections'\n    },\n    {\n         name: 'twitterEngagement'\n       , type: 'text'\n       , endpoint: '/twitterengagement'\n    },\n    {\n         name: 'political'\n       , type: 'text'\n       , endpoint: '/political'\n       , version: 2\n    },\n    {\n         name: 'sentiment'\n       , type: 'text'\n       , endpoint: '/sentiment'\n    },\n    {\n         name: 'sentimentHQ'\n       , type: 'text'\n       , endpoint: '/sentimenthq'\n    },\n    {\n         name: 'personality'\n       , type: 'text'\n       , endpoint: '/personality'\n    },\n    {\n         name: 'personas'\n       , type: 'text'\n       , endpoint: '/personality'\n       , config: {'persona': true}\n    },\n    {\n         name: 'language'\n       , type: 'text'\n       , endpoint: '/language'\n    },\n    {\n         name: 'textTags'\n       , type: 'text'\n       , endpoint: '/texttags'\n    },\n    {\n         name: 'keywords'\n       , type: 'text'\n       , endpoint: '/keywords'\n       , version: 2\n    },\n    {\n         name: 'people'\n       , type: 'text'\n       , endpoint: '/people'\n       , version: 2\n    },\n    {\n         name: 'places'\n       , type: 'text'\n       , endpoint: '/places'\n       , version: 2\n    },\n    {\n         name: 'organizations'\n       , type: 'text'\n       , endpoint: '/organizations'\n       , version: 2\n    },\n    {\n         name: 'namedEntities'\n       , type: 'text'\n       , endpoint: '/namedentities'\n       , version: 2\n    },\n    {\n         name: 'textFeatures'\n       , type: 'text'\n       , endpoint: '/textfeatures'\n       , synonyms: false\n    },\n    {\n         name: 'emotion'\n       , type: 'text'\n       , endpoint: '/emotion'\n    },\n    {\n         name: 'analyzeText'\n       , type: 'text'\n       , endpoint: '/apis/multiapi'\n    },\n    {\n         name: 'facialLocalization'\n       , type: 'image'\n       , size: false\n       , endpoint: '/faciallocalization'\n    },\n    {\n         name: 'facialFeatures'\n       , type: 'image'\n       , size: 48\n       , endpoint: '/facialfeatures'\n    },\n    {\n         name: 'fer'\n       , type: 'image'\n       , size: 48\n       , endpoint: '/fer'\n    },\n    {\n         name: 'imageFeatures'\n       , type: 'image'\n       , size: 512\n       , min_axis: true\n       , endpoint: '/imagefeatures'\n       , version: 3\n    },\n    {\n         name: 'imageRecognition'\n       , type: 'image'\n       , size: 144\n       , min_axis: true\n       , endpoint: '/imagerecognition'\n    },\n    {\n         name: 'contentFiltering'\n       , type: 'image'\n       , size: 128\n       , min_axis: true\n       , endpoint: '/contentfiltering'\n    },\n    {\n         name: 'analyzeImage'\n       , type: 'image'\n       , size: 64\n       , endpoint: '/apis/multiapi'\n    },\n    {\n         name: 'summarization'\n       , type: 'text'\n       , endpoint: '/summarization'\n    },\n    {\n         name: 'pdfExtraction'\n       , type: 'pdf'\n       , endpoint: '/pdfextraction'\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-indico.io/node_modules/indico.io/lib/settings.js":"var Promise = require('bluebird')\n    , path = require('path')\n    , fs = Promise.promisifyAll(require('fs'))\n    , ini = Promise.promisifyAll(require('config-ini'))\n    , expandTilde = require('expand-tilde')\n    , settings = module.exports;\n\nvar loadIndicorc = function() {\n  return new Promise(function(resolve, reject){\n    /*\n    Search for valid indicorc files to use as configuration\n    Load files in order of precendence if any are found\n    */\n\n    var localPath = path.resolve(process.cwd(), './.indicorc');\n    var globalPath = expandTilde('~/.indicorc');\n    var paths = [globalPath, localPath];\n    var validPaths = [];\n\n    for (var i = path.length - 1; i >= 0; i--) {\n        if (fs.existsSync(paths[i])) {\n            validPaths.push(paths[i]);\n        }\n    }\n\n    if (paths.length < 1) {\n        reject(new Error('Could not find .indicorc and no local path was given'))\n    }\n\n    resolve(validPaths);\n  })\n  .then(ini.load);\n}\n\nvar indicorc = loadIndicorc().then(function(indicorcFile) {\n  return indicorcFile;\n})\n\nvar resolveApiKey = function(config, moduleConfig, configFile) {\n    /*\n    Check whether auth credentials are provided via:\n      - config: object passed in when function is called\n      - moduleConfig: a constant defined in code after module import\n      - environment variables: found in system environment\n      - configFile: parsed from file at module import\n\n    The last argument (configFile) is optional and is primarily\n    provided to make testing simpler.\n    */\n    configFile = configFile || indicorc;\n\n    var validConfig = Boolean(\n        config !== undefined &&\n        config !== null &&\n        config.hasOwnProperty('apiKey')\n    );\n\n    var validEnvironmentVariables = Boolean(\n        process.env.INDICO_API_KEY\n    );\n\n    var validConfigFile = Boolean(\n        configFile !== undefined &&\n        configFile.hasOwnProperty('auth') &&\n        configFile.auth.hasOwnProperty('api_key')\n    );\n    if (validConfig) {\n        return config.apiKey\n    } else if (moduleConfig) {\n        return moduleConfig;\n    } else if (validEnvironmentVariables) {\n        return process.env.INDICO_API_KEY\n    } else if (validConfigFile) {\n        return configFile.auth.api_key\n    }  else {\n        return false;\n    }\n}\n\nvar resolvePrivateCloud = function(config, moduleConfig, configFile) {\n  /*\n  Check whether private cloud endpoints are provided via:\n    - config: object passed in when function is called\n    - moduleConfig: a constant defined in code after module import\n    - environment variables: found in system environment\n    - configFile: parsed from file at module import\n\n  The second argument (configFile) is optional and is primarily\n  provided to make testing simpler.\n  */\n\n  configFile = configFile || indicorc;\n\n  var validConfig = Boolean(\n    config !== undefined &&\n    config.hasOwnProperty('privateCloud')\n  );\n\n  var validEnvironmentVariables = Boolean(\n    process.env.INDICO_CLOUD\n  );\n\n  var validConfigFile = Boolean(\n    configFile !== undefined &&\n    configFile.hasOwnProperty('private_cloud') &&\n    configFile.private_cloud.hasOwnProperty('cloud')\n  );\n\n  if (validConfig) {\n    return config.privateCloud;\n  } else if (moduleConfig) {\n    return moduleConfig;\n  } else if (validEnvironmentVariables) {\n    return process.env.INDICO_CLOUD;\n  } else if (validConfigFile) {\n    return configFile.private_cloud.cloud;\n  } else {\n    return false;\n  }\n}\n\nsettings.resolveApiKey = resolveApiKey;\nsettings.resolvePrivateCloud = resolvePrivateCloud;\n","/home/travis/build/npmtest/node-npmtest-indico.io/node_modules/indico.io/lib/image.js":"var fs = require('fs'),\n    filetype = require(\"file-type\"),\n    request = require('request'),\n    validUrl = require(\"valid-url\"),\n    Promise = require('bluebird');\n\ntry {\n  lwip = require('lwip')\n} catch (err) {\n  lwip = null;\n}\n\n// Backwards compatibility for array checking\nif (typeof Array.isArray === 'undefined') {\n  Array.isArray = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n};\n\nvar handleString = function (image) {\n  return new Promise(function (resolve, reject) {\n    var input, options;\n    if (validUrl.isWebUri(image)) {\n      resolve({\n        \"image\": image,\n        \"type\": \"url\"\n      });\n    } else if (typeof image === 'string') {\n      if (image.length <= 260 && fs.lstatSync(image).isFile()) {\n        input = image;\n        var arr = image.split('.');\n        options = arr[arr.length - 1];\n        resolve({\n          \"image\": input,\n          \"options\": options,\n        });\n      } else {\n        input = new Buffer(image, 'base64');\n        options = filetype(input).ext;\n        resolve({\n          \"image\": input,\n          \"options\": options,\n        });\n      }\n    } else {\n      resolve(new Error(\n        \"Data input type must be array, filepath, or base64 encoded string\"\n      ));\n    }\n  });\n}\nvar handleImage = function (image, size, min_axis) {\n  return new Promise(function (resolve, reject) {\n    handleString(image).then(function (output) {\n      var input = output.image;\n      var options = output.options;\n      var type = output.type;\n\n      if (type === \"url\") {\n        resolve(input);\n      } else {\n        // Image reading and resizing\n        if (!lwip) {\n          reject(new Error(\n            \"Image processing dependency LWIP could not be loaded.\"\n          ))\n        }\n        try {\n          lwip.open(input, options, function (err, image) {\n            var ratio = image.width() / image.height();\n            if (ratio >= 10 || ratio <= .1)\n              console.warn(\n                \"For best performance, we recommend using images of aspect ratio less than 1:10.\"\n              );\n\n            if (size) {\n              var new_height = size,\n                  new_width = size;\n\n              if (min_axis) {\n                new_height = ratio > 1 ? 1 / ratio * size : size;\n                new_width = ratio > 1 ? size : ratio * size;\n              }\n              image.resize(new_width, new_height, function (err, image) {\n                image.toBuffer('png', function (err, buffer) {\n                  resolve(buffer.toString(\"base64\"));\n                });\n              });\n            } else {\n              image.toBuffer('png', function (err, buffer) {\n                resolve(buffer.toString(\"base64\"));\n              });\n            }\n          });\n        } catch (err) {\n          reject(new Error(\"An unknown error while loading your image.\"));\n        }\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  preprocess: function (images, size, min_axis, batch) {\n    return new Promise(function (resolve, reject) {\n      // aggregate asynchronous results for batch reqs\n      if (batch) {\n        Promise.all(images.map(function (image) {\n          return handleImage(image, size, min_axis);\n        })).then(function (data) {\n          resolve(data);\n        });\n      } else {\n        handleImage(images, size).then(function (b64) {\n          resolve(b64);\n        });\n      }\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-indico.io/node_modules/indico.io/lib/pdf.js":"var fs = require('fs'),\n    filetype = require(\"file-type\"),\n    request = require('request'),\n    validUrl = require(\"valid-url\"),\n    Promise = require('bluebird');\n\n// Backwards compatibility for array checking\nif (typeof Array.isArray === 'undefined') {\n  Array.isArray = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n};\n\nvar handleString = function (pdf) {\n  return new Promise(function (resolve, reject) {\n    var input, options;\n    if (validUrl.isWebUri(pdf)) {\n      // File\n      resolve({\n        \"pdf\": pdf,\n        \"type\": \"url\"\n      });\n    } else if (typeof pdf === 'string') {\n      if (pdf.length <= 260 && fs.lstatSync(pdf).isFile()) {\n        // File\n        input = pdf;\n        resolve({\n          \"pdf\": input,\n          \"type\": \"file\"\n        });\n      } else {\n        // Base64 encoded pdf\n        input = new Buffer(pdf, 'base64');\n        resolve({\n          \"pdf\": input,\n          \"type\": \"b64\"\n        });\n      }\n    } else {\n      resolve(new Error(\n        \"Data input type must be url, filepath, or base64 encoded string\"\n      ));\n    }\n  });\n}\nvar handlePdf = function (pdf) {\n  return new Promise(function (resolve, reject) {\n    handleString(pdf).then(function (output) {\n      var input = output.pdf;\n      var type = output.type;\n\n      if (type === \"url\" || type === 'b64') {\n        resolve(input);\n      } else {\n        // Type: file\n        try {\n          fs.readFile(input, function (err, pdf) {\n            resolve(pdf.toString('base64'));\n          });\n        } catch (err) {\n          reject(new Error(\"An unknown error while loading your pdf.\"));\n        }\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  preprocess: function (pdfs, batch) {\n    return new Promise(function (resolve, reject) {\n      // aggregate asynchronous results for batch reqs\n      if (batch) {\n        Promise.all(pdfs.map(function (pdf) {\n          return handlePdf(pdf);\n        })).then(function (data) {\n          resolve(data);\n        });\n      } else {\n        handlePdf(pdfs).then(function (b64) {\n          resolve(b64);\n        });\n      }\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-indico.io/node_modules/indico.io/lib/custom.js":"var Promise = require('bluebird')\n  , makeRequest = require('./services.js').makeRequest\n  , addKeywordArguments = require('./services.js').addKeywordArguments;\n\nvar Collection = function(collection, config) {\n  var _this = this;\n  this.promise_chain = Promise.resolve();\n\n  this.collection = collection;\n  config = config || {};\n  config['collection'] = collection;\n  this.version = config[\"version\"] || 1;\n  this.baseConfig = config;\n\n  this.addData = function(data, config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n\n      if (typeof data === 'undefined') {\n        var msg = \"Must submit data in format ['data', 'label']. You can also submit multiple in a list.\";\n        deferred.reject(new Error(msg));\n      }\n\n      var batch = typeof data !== 'undefined' && typeof data[0] !== 'string';\n      makeRequest('/custom/add_data', this.version, data, batch, config).then(function (res) {\n        deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  };\n\n  this.removeExample = function(data, config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      if (typeof data === 'undefined') {\n        var msg = \"Must submit examples for removal in string format (i.e. 'example'). You can also submit multiple in a list.\";\n        deferred.reject(new Error(msg));\n      }\n      var batch = (typeof data !== 'undefined' && typeof data !== 'string') ? true : false;\n\n      makeRequest('/custom/remove_example', this.version, data, batch, config).then(function(res) {\n        deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.train = function(config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      makeRequest('/custom/train', this.version, {}, false, config).then(function(res) {\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  };\n\n  this.wait = function(status, config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      var waitForTrained = setInterval(function() {\n        makeRequest('/custom/info', this.version, {}, false, config).then(function(collection) {\n          if (!collection) {\n            var msg = _this.collection + \" does not exist at the moment! Make sure this is something that has been created\";\n            deferred.reject(new Error(msg));\n          }\n          if (collection && collection['status'] !== 'training') {\n            if (collection[\"status\"] !== \"ready\") {\n              var msg = _this.collection + \" failed with status \" + collection[\"status\"];\n              deferred.reject(new Error(msg));\n            }\n            clearInterval(waitForTrained);\n            deferred.resolve(collection);\n          }\n        });\n      }, 1000);\n      return deferred.promise;\n    });\n    return _this;\n  };\n\n  this.info = function(config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      makeRequest('/custom/info', this.version, {}, false, config).then(function(collection) {\n        if (collection['status'] === undefined) {\n          deferred.resolve({\n            model_type: null,\n            input_type: null,\n            number_of_examples: 0,\n            status: 'no examples'\n          });\n        } else {\n          deferred.resolve(collection);\n        }\n      })\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.predict = function(data, config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      if (typeof data === 'undefined') {\n        var msg = \"Must submit data in string format 'data'. You can also submit multiple in a list.\";\n        deferred.reject(new Error(msg));\n      }\n\n      var batch = (typeof data !== 'undefined' && typeof data !== 'string') ? true : false;\n\n      makeRequest('/custom/predict', this.version, data, batch, config).then(function(res) {\n        deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  };\n\n  this.clear = function(config) {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      makeRequest('/custom/clear_collection', this.version, {}, false, config).then(function(res) {\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.rename = function(name, config)  {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    config['name'] = name;\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n\n\n      makeRequest('/custom/rename', this.version, {}, false, config).then(function(res) {\n          _this.baseConfig['collection'] = name;\n          _this.collection = name;\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.register = function(config)  {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n      makeRequest('/custom/register', this.version, {}, false, config).then(function(res) {\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.deregister = function(config)  {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n\n      makeRequest('/custom/deregister', this.version, {}, false, config).then(function(res) {\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.authorize = function(email, config)  {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    config['email'] = email;\n    if (config['permission_type'] === undefined) {\n      config['permission_type'] = 'read';\n    }\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n\n      makeRequest('/custom/authorize', this.version, {}, false, config).then(function(res) {\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.deauthorize = function(email, config)  {\n    var config = addKeywordArguments(config || {}, _this.baseConfig);\n    config['email'] = email;\n    _this.promise_chain = _this.promise_chain.then(function() {\n      var deferred = Promise.pending();\n\n      makeRequest('/custom/deauthorize', this.version, {}, false, config).then(function(res) {\n          deferred.resolve(res);\n      });\n      return deferred.promise;\n    });\n    return _this;\n  }\n\n  this.then = function(callback) {\n    return this.promise_chain.then(callback);\n  }\n\n  this.catch = function(errback) {\n    return this.promise_chain.catch(errback);\n  }\n\n  return this;\n}\n\nmodule.exports = Collection\n"}